
TinyRGB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000001a6  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800078  00800078  00000252  2**0
                  ALLOC
  3 .stab         00000360  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000071  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000625  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000006b  00000000  00000000  00000645  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000154  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000084  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000202  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000030  00000000  00000000  00000a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000d4  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e6 ea       	ldi	r30, 0xA6	; 166
  36:	f1 e0       	ldi	r31, 0x01	; 1
  38:	03 c0       	rjmp	.+6      	; 0x40 <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	c8 95       	lpm
  3c:	31 96       	adiw	r30, 0x01	; 1
  3e:	0d 92       	st	X+, r0

00000040 <.do_copy_data_start>:
  40:	a8 37       	cpi	r26, 0x78	; 120
  42:	b1 07       	cpc	r27, r17
  44:	d1 f7       	brne	.-12     	; 0x3a <.do_copy_data_loop>

00000046 <__do_clear_bss>:
  46:	10 e0       	ldi	r17, 0x00	; 0
  48:	a8 e7       	ldi	r26, 0x78	; 120
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	01 c0       	rjmp	.+2      	; 0x50 <.do_clear_bss_start>

0000004e <.do_clear_bss_loop>:
  4e:	1d 92       	st	X+, r1

00000050 <.do_clear_bss_start>:
  50:	ab 37       	cpi	r26, 0x7B	; 123
  52:	b1 07       	cpc	r27, r17
  54:	e1 f7       	brne	.-8      	; 0x4e <.do_clear_bss_loop>
  56:	1f d0       	rcall	.+62     	; 0x96 <main>
  58:	a5 c0       	rjmp	.+330    	; 0x1a4 <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <check_buttom>:
unsigned char b_color_list[8] = { 0,0,3,3,0,3,3,0 };
unsigned char counter=0;

unsigned char check_buttom(void)
{
  5c:	b0 9b       	sbis	0x16, 0	; 22
  5e:	05 c0       	rjmp	.+10     	; 0x6a <check_buttom+0xe>
	static unsigned char delay=0, key_press=0;

	// buttom is not press
	if((PIN_SW & _BV(IO_SW)) != 0)
	{
		key_press = 0;
  60:	10 92 79 00 	sts	0x0079, r1
  64:	80 e0       	ldi	r24, 0x00	; 0
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	08 95       	ret
		return 0;
	}

	if(key_press)
  6a:	80 91 79 00 	lds	r24, 0x0079
  6e:	88 23       	and	r24, r24
  70:	79 f4       	brne	.+30     	; 0x90 <check_buttom+0x34>
		return 0;
	
	// delay 10/250 ms
	if(++delay == 10)
  72:	80 91 7a 00 	lds	r24, 0x007A
  76:	8f 5f       	subi	r24, 0xFF	; 255
  78:	80 93 7a 00 	sts	0x007A, r24
  7c:	8a 30       	cpi	r24, 0x0A	; 10
  7e:	41 f4       	brne	.+16     	; 0x90 <check_buttom+0x34>
	{
		delay = 0;
  80:	10 92 7a 00 	sts	0x007A, r1
		key_press = 1;
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	80 93 79 00 	sts	0x0079, r24
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	08 95       	ret
		return 1;
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	90 e0       	ldi	r25, 0x00	; 0
	}

	return 0;
}
  94:	08 95       	ret

00000096 <main>:

int main(void)
{
  96:	df 92       	push	r13
  98:	ef 92       	push	r14
  9a:	ff 92       	push	r15
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17
	unsigned char color_index=0, r,g,b, delay=0;

	// setup i/o
	DDR_R = IO_MASK_R|IO_MASK_G;
  a0:	8c ef       	ldi	r24, 0xFC	; 252
  a2:	87 bb       	out	0x17, r24	; 23
	//DDR_G |= IO_MASK_G;
	DDR_B = IO_MASK_B;
  a4:	80 e7       	ldi	r24, 0x70	; 112
  a6:	81 bb       	out	0x11, r24	; 17
	//PORT_R = IO_MASK_R|IO_MASK_G;
	//PORT_G |= IO_MASK_G;
	//PORT_B = IO_MASK_B;
	
	// pull-up input i/o for color switch
	PORT_SW |= _BV(PA0);
  a8:	c0 9a       	sbi	0x18, 0	; 24

	// setup timer0
	// 8MHz/64
	TCCR0B = 0x03;
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	83 bf       	out	0x33, r24	; 51
	
	// initial color
	r = r_color_list[0];
  ae:	10 91 60 00 	lds	r17, 0x0060
	g = g_color_list[0];
  b2:	00 91 68 00 	lds	r16, 0x0068
	b = b_color_list[0];
  b6:	f0 90 70 00 	lds	r15, 0x0070
  ba:	ee 24       	eor	r14, r14
  bc:	dd 24       	eor	r13, r13

	for(;;)
	{
		// wait until timer0 is overflow
		// 64*256/8MHz = 2.048ms
		while ( (TIFR & _BV ( TOV0 )) == 0 );
  be:	08 b6       	in	r0, 0x38	; 56
  c0:	01 fe       	sbrs	r0, 1
  c2:	fd cf       	rjmp	.-6      	; 0xbe <main+0x28>
		TIFR |= _BV(TOV0);
  c4:	88 b7       	in	r24, 0x38	; 56
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	88 bf       	out	0x38, r24	; 56
		
		// turn off LED
		if(counter == r && r != 3)
  ca:	90 91 78 00 	lds	r25, 0x0078
  ce:	91 17       	cp	r25, r17
  d0:	29 f4       	brne	.+10     	; 0xdc <main+0x46>
  d2:	13 30       	cpi	r17, 0x03	; 3
  d4:	19 f0       	breq	.+6      	; 0xdc <main+0x46>
		{
			PORT_R |= IO_MASK_R;
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	80 6e       	ori	r24, 0xE0	; 224
  da:	88 bb       	out	0x18, r24	; 24
		}
		if(counter == g && g != 3)
  dc:	90 17       	cp	r25, r16
  de:	29 f4       	brne	.+10     	; 0xea <__stack+0xb>
  e0:	03 30       	cpi	r16, 0x03	; 3
  e2:	19 f0       	breq	.+6      	; 0xea <__stack+0xb>
		{
			PORT_G |= IO_MASK_G;
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	8c 61       	ori	r24, 0x1C	; 28
  e8:	88 bb       	out	0x18, r24	; 24
		}
		if(counter == b && b != 3)
  ea:	9f 15       	cp	r25, r15
  ec:	39 f4       	brne	.+14     	; 0xfc <__stack+0x1d>
  ee:	83 e0       	ldi	r24, 0x03	; 3
  f0:	f8 16       	cp	r15, r24
  f2:	09 f4       	brne	.+2      	; 0xf6 <__stack+0x17>
  f4:	53 c0       	rjmp	.+166    	; 0x19c <__stack+0xbd>
		{
			PORT_B |= IO_MASK_B;
  f6:	82 b3       	in	r24, 0x12	; 18
  f8:	80 67       	ori	r24, 0x70	; 112
  fa:	82 bb       	out	0x12, r24	; 18
		}
		// turn on LED
		if(++counter == 4)
  fc:	89 2f       	mov	r24, r25
  fe:	8f 5f       	subi	r24, 0xFF	; 255
 100:	80 93 78 00 	sts	0x0078, r24
 104:	84 30       	cpi	r24, 0x04	; 4
 106:	89 f4       	brne	.+34     	; 0x12a <__stack+0x4b>
		{
			counter = 0;
 108:	10 92 78 00 	sts	0x0078, r1
			if(r != 0 )
 10c:	11 23       	and	r17, r17
 10e:	19 f0       	breq	.+6      	; 0x116 <__stack+0x37>
				PORT_R &= ~IO_MASK_R;
 110:	88 b3       	in	r24, 0x18	; 24
 112:	8f 71       	andi	r24, 0x1F	; 31
 114:	88 bb       	out	0x18, r24	; 24
			if(g != 0 )
 116:	00 23       	and	r16, r16
 118:	19 f0       	breq	.+6      	; 0x120 <__stack+0x41>
				PORT_G &= ~IO_MASK_G;
 11a:	88 b3       	in	r24, 0x18	; 24
 11c:	83 7e       	andi	r24, 0xE3	; 227
 11e:	88 bb       	out	0x18, r24	; 24
			if(b != 0 )
 120:	ff 20       	and	r15, r15
 122:	19 f0       	breq	.+6      	; 0x12a <__stack+0x4b>
				PORT_B &= ~IO_MASK_B;
 124:	82 b3       	in	r24, 0x12	; 18
 126:	8f 78       	andi	r24, 0x8F	; 143
 128:	82 bb       	out	0x12, r24	; 18
		}
		
		// change color
		if( check_buttom() )
 12a:	98 df       	rcall	.-208    	; 0x5c <check_buttom>
 12c:	88 23       	and	r24, r24
 12e:	c9 f0       	breq	.+50     	; 0x162 <__stack+0x83>
		{
			if(++color_index == 9)
 130:	e3 94       	inc	r14
 132:	89 e0       	ldi	r24, 0x09	; 9
 134:	e8 16       	cp	r14, r24
 136:	11 f4       	brne	.+4      	; 0x13c <__stack+0x5d>
 138:	ee 24       	eor	r14, r14
 13a:	03 c0       	rjmp	.+6      	; 0x142 <__stack+0x63>
				color_index = 0;
			if(color_index<8)
 13c:	87 e0       	ldi	r24, 0x07	; 7
 13e:	8e 15       	cp	r24, r14
 140:	80 f0       	brcs	.+32     	; 0x162 <__stack+0x83>
			{
				r = r_color_list[color_index];
 142:	ee 2d       	mov	r30, r14
 144:	ff 27       	eor	r31, r31
 146:	ae 2f       	mov	r26, r30
 148:	bf 2f       	mov	r27, r31
 14a:	a0 5a       	subi	r26, 0xA0	; 160
 14c:	bf 4f       	sbci	r27, 0xFF	; 255
 14e:	1c 91       	ld	r17, X
				g = g_color_list[color_index];
 150:	ae 2f       	mov	r26, r30
 152:	bf 2f       	mov	r27, r31
 154:	a8 59       	subi	r26, 0x98	; 152
 156:	bf 4f       	sbci	r27, 0xFF	; 255
 158:	0c 91       	ld	r16, X
				b = b_color_list[color_index];
 15a:	e0 59       	subi	r30, 0x90	; 144
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	f0 80       	ld	r15, Z
 160:	ae cf       	rjmp	.-164    	; 0xbe <main+0x28>
			}
		}
		if(color_index == 8)
 162:	88 e0       	ldi	r24, 0x08	; 8
 164:	e8 16       	cp	r14, r24
 166:	09 f0       	breq	.+2      	; 0x16a <__stack+0x8b>
 168:	aa cf       	rjmp	.-172    	; 0xbe <main+0x28>
		{
			if(++delay == 125)
 16a:	d3 94       	inc	r13
 16c:	8d e7       	ldi	r24, 0x7D	; 125
 16e:	d8 16       	cp	r13, r24
 170:	09 f0       	breq	.+2      	; 0x174 <__stack+0x95>
 172:	a5 cf       	rjmp	.-182    	; 0xbe <main+0x28>
			{
				delay = 0;
				if(++r == 4)
 174:	1f 5f       	subi	r17, 0xFF	; 255
 176:	14 30       	cpi	r17, 0x04	; 4
 178:	09 f0       	breq	.+2      	; 0x17c <__stack+0x9d>
 17a:	a0 cf       	rjmp	.-192    	; 0xbc <main+0x26>
				{
					r = 0;
					if(++g == 4)
 17c:	0f 5f       	subi	r16, 0xFF	; 255
 17e:	04 30       	cpi	r16, 0x04	; 4
 180:	11 f0       	breq	.+4      	; 0x186 <__stack+0xa7>
 182:	10 e0       	ldi	r17, 0x00	; 0
 184:	9b cf       	rjmp	.-202    	; 0xbc <main+0x26>
					{
						g = 0;
						if(++b == 4)
 186:	f3 94       	inc	r15
 188:	84 e0       	ldi	r24, 0x04	; 4
 18a:	f8 16       	cp	r15, r24
 18c:	21 f4       	brne	.+8      	; 0x196 <__stack+0xb7>
 18e:	10 e0       	ldi	r17, 0x00	; 0
 190:	00 e0       	ldi	r16, 0x00	; 0
 192:	ff 24       	eor	r15, r15
 194:	93 cf       	rjmp	.-218    	; 0xbc <main+0x26>
 196:	10 e0       	ldi	r17, 0x00	; 0
 198:	00 e0       	ldi	r16, 0x00	; 0
 19a:	90 cf       	rjmp	.-224    	; 0xbc <main+0x26>
 19c:	84 e0       	ldi	r24, 0x04	; 4
 19e:	80 93 78 00 	sts	0x0078, r24
 1a2:	b2 cf       	rjmp	.-156    	; 0x108 <__stack+0x29>

000001a4 <_exit>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <_exit>
